{"version":3,"sources":["worker.js"],"names":["sheet","errs","vals","self","onmessage","data","coord","map","p","toLowerCase","c","name","Object","getOwnPropertyDescriptor","get","defineProperty","NaN","x","toString","eval","call","slice","e","match","exec","postMessage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,KAAJ,EAAWC,IAAX,EAAiBC,IAAjB;;AACAC,IAAI,CAACC,SAAL,GAAiB,gBAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC5BL,EAAAA,KAD4B,GACNK,IADM;AACrBJ,EAAAA,IADqB,GACA,EADA;AACfC,EAAAA,IADe,GACI,EADJ;;AAAA,6BAGlBI,KAHkB;AAI3B;AACA,KAAC,EAAD,EAAK,GAAL,EAAUC,GAAV,CAAc,UAAAC,CAAC;AAAA,aACb,CAACF,KAAD,EAAQA,KAAK,CAACG,WAAN,EAAR,EAA6BF,GAA7B,CAAiC,UAAAG,CAAC,EAAI;AACpC,YAAMC,IAAI,GAAGH,CAAC,GAAGE,CAAjB,CADoC,CAGpC;;AACA,YAAI,CAACE,MAAM,CAACC,wBAAP,CAAgCV,IAAhC,EAAsCQ,IAAtC,KAA+C,EAAhD,EAAoDG,GAAxD,EAA6D;AAC3D;AACD,SANmC,CAQpC;;;AACAF,QAAAA,MAAM,CAACG,cAAP,CAAsBZ,IAAtB,EAA4BQ,IAA5B,EAAkC;AAChCG,UAAAA,GADgC,iBAC1B;AACJ,gBAAIR,KAAK,IAAIJ,IAAb,EAAmB;AACjB,qBAAOA,IAAI,CAACI,KAAD,CAAX;AACD;;AACDJ,YAAAA,IAAI,CAACI,KAAD,CAAJ,GAAcU,GAAd,CAJI,CAMJ;;AACA,gBAAIC,CAAC,GAAG,CAACjB,KAAK,CAACM,KAAD,CAAd;;AACA,gBAAIN,KAAK,CAACM,KAAD,CAAL,KAAiBW,CAAC,CAACC,QAAF,EAArB,EAAmC;AACjCD,cAAAA,CAAC,GAAGjB,KAAK,CAACM,KAAD,CAAT;AACD,aAVG,CAYJ;;;AACA,gBAAI;AACFJ,cAAAA,IAAI,CAACI,KAAD,CAAJ,GAAc,QAAQW,CAAC,CAAC,CAAD,CAAT,GAAeE,IAAI,CAACC,IAAL,CAAU,IAAV,EAAgBH,CAAC,CAACI,KAAF,CAAQ,CAAR,CAAhB,CAAf,GAA6CJ,CAA3D;AACD,aAFD,CAEE,OAAOK,CAAP,EAAU;AACV,kBAAMC,KAAK,GAAG,4BAA4BC,IAA5B,CAAiCF,CAAjC,CAAd;;AACA,kBAAIC,KAAK,IAAI,EAAEA,KAAK,CAAC,CAAD,CAAL,IAAYpB,IAAd,CAAb,EAAkC;AAChC;AACAA,gBAAAA,IAAI,CAACoB,KAAK,CAAC,CAAD,CAAN,CAAJ,GAAiB,CAAjB;AACA,uBAAOrB,IAAI,CAACI,KAAD,CAAX;AACA,uBAAOH,IAAI,CAACG,KAAD,CAAX;AACD,eAPS,CAQV;;;AACAL,cAAAA,IAAI,CAACK,KAAD,CAAJ,GAAcgB,CAAC,CAACJ,QAAF,EAAd;AACD,aAzBG,CA2BJ;;;AACA,4BAAehB,IAAI,CAACI,KAAD,CAAnB;AACE,mBAAK,UAAL;AACA,mBAAK,QAAL;AACEJ,gBAAAA,IAAI,CAACI,KAAD,CAAJ,IAAe,EAAf;AAHJ;;AAKA,mBAAOJ,IAAI,CAACI,KAAD,CAAX;AACD;AAnC+B,SAAlC;AAqCD,OA9CD,CADa;AAAA,KAAf;AAL2B;;AAG7B,OAAK,IAAMA,KAAX,IAAoBN,KAApB,EAA2B;AAAA,UAAhBM,KAAgB;AAmD1B,GAtD4B,CAwD7B;;;AACA,OAAK,IAAMA,KAAX,IAAoBN,KAApB,EAA2B;AACzBG,IAAAA,IAAI,CAACG,KAAD,CAAJ;AACD;;AACDmB,EAAAA,WAAW,CAAC,CAACxB,IAAD,EAAOC,IAAP,CAAD,CAAX;AACD,CA7DD","file":"worker.ab30da2c.map","sourceRoot":"..","sourcesContent":["let sheet, errs, vals;\nself.onmessage = ({ data }) => {\n  [sheet, errs, vals] = [data, {}, {}];\n\n  for (const coord in sheet) {\n    // Four variable names pointing to the same coordinate: A1, a1, $A1, $a1\n    [\"\", \"$\"].map(p =>\n      [coord, coord.toLowerCase()].map(c => {\n        const name = p + c;\n\n        // Worker is reused across computations, so only define each variable once\n        if ((Object.getOwnPropertyDescriptor(self, name) || {}).get) {\n          return;\n        }\n\n        // Define self['A1'], w`hich is the same thing as the global variable A1\n        Object.defineProperty(self, name, {\n          get() {\n            if (coord in vals) {\n              return vals[coord];\n            }\n            vals[coord] = NaN;\n\n            // Turn numeric strings into numbers, so =A1+C1 works when both are numbers\n            let x = +sheet[coord];\n            if (sheet[coord] !== x.toString()) {\n              x = sheet[coord];\n            }\n\n            // Evaluate formula cells that begin with =\n            try {\n              vals[coord] = \"=\" === x[0] ? eval.call(null, x.slice(1)) : x;\n            } catch (e) {\n              const match = /\\$?[A-Za-z]+[1-9][0-9]*\\b/.exec(e);\n              if (match && !(match[0] in self)) {\n                // The formula refers to a uninitialized cell; set it to 0 and retry\n                self[match[0]] = 0;\n                delete vals[coord];\n                return self[coord];\n              }\n              // Otherwise, stringify the caught exception in the errs object\n              errs[coord] = e.toString();\n            }\n\n            // Turn vals[coord] into a string if it's not a number or boolean\n            switch (typeof vals[coord]) {\n              case \"function\":\n              case \"object\":\n                vals[coord] += \"\";\n            }\n            return vals[coord];\n          }\n        });\n      })\n    );\n  }\n\n  // For each coordinate in the sheet, call the property getter defined above\n  for (const coord in sheet) {\n    self[coord];\n  }\n  postMessage([errs, vals]);\n};\n"]}